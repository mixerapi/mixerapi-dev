<?php

namespace MixerApi\JsonLdView\Test\TestCase\View;

use Cake\Controller\Component\PaginatorComponent;
use Cake\Controller\ComponentRegistry;
use Cake\Controller\Controller;
use Cake\Datasource\FactoryLocator;
use Cake\Http\Response;
use Cake\Http\ServerRequest;
use Cake\Routing\Router;
use Cake\TestSuite\TestCase;
use MixerApi\Core\Response\ResponseModifier;

class JsonLdViewTest extends TestCase
{
    /**
     * @var string
     */
    private const EXT = 'jsonld';

    /**
     * @var string[]
     */
    private const MIME_TYPES = ['application/ld+json'];

    /**
     * @var string
     */
    private const VIEW_CLASS = 'MixerApi/JsonLdView.JsonLd';

    /**
     * @var string[]
     */
    public $fixtures = [
        'plugin.MixerApi/JsonLdView.Actors',
        'plugin.MixerApi/JsonLdView.FilmActors',
        'plugin.MixerApi/JsonLdView.Films',
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        static::setAppNamespace('MixerApi\JsonLdView\Test\App');
        Router::reload();
        Router::connect('/', ['controller' => 'Actors', 'action' => 'view']);
        Router::connect('/:controller/:action/*');
        Router::connect('/:plugin/:controller/:action/*');
    }

    public function test_collection()
    {
        $request = new ServerRequest([
            'url' => 'actors',
            'params' => [
                'plugin' => null,
                'controller' => 'actors',
                'action' => 'index',
            ]
        ]);

        $request = $request->withEnv('HTTP_ACCEPT', 'application/ld+json, text/plain, */*');
        Router::setRequest($request);
        $response = (new ResponseModifier(self::EXT, self::MIME_TYPES, self::VIEW_CLASS))
            ->modify($request, new Response());

        $controller = new Controller($request, $response, 'Actors');
        $controller->modelClass = 'Actors';
        $registry = new ComponentRegistry($controller);

        $paginator = new PaginatorComponent($registry);

        $actorTable = FactoryLocator::get('Table')->get('Actors');
        $actors = $paginator->paginate($actorTable, [
            'contain' => ['Films'],
            'limit' => 1
        ]);

        $controller->set([
            'actors' => $actors,
        ]);

        $controller->viewBuilder()
            ->setClassName('MixerApi/JsonLdView.JsonLd')
            ->setOptions(['serialize' => 'actors']);
        $View = $controller->createView();
        $output = $View->render();

        $this->assertIsString($output);

        $object = json_decode($output);

        $this->assertIsObject($object);
        $this->assertEquals(1, $object->pageItems);
        $this->assertEquals(20, $object->totalItems);
        $this->assertEquals('/actors', $object->view->{'@id'});
        $this->assertEquals('/actors/index?page=2', $object->view->next);
        $this->assertEquals('/actors/index?page=20', $object->view->last);

        $actor = $object->member[0];

        $this->assertIsArray($actor->films);
        $this->assertEquals('/actors', $object->{'@id'});
    }

    public function test_item()
    {
        $controller = $this->getControllerForItem();

        $controller->viewBuilder()
            ->setClassName('MixerApi/JsonLdView.JsonLd')
            ->setOptions(['serialize' => 'actor']);

        $View = $controller->createView();
        $output = $View->render();

        $this->assertIsString($output);

        $object = json_decode($output);

        $this->assertIsObject($object);

        $this->assertEquals('/actors/1', $object->{'@id'});
        $this->assertIsArray($object->films);
    }

    public function test_item_with_no_json_options()
    {
        $controller = $this->getControllerForItem();

        $controller->viewBuilder()
            ->setClassName('MixerApi/JsonLdView.JsonLd')
            ->setOptions([
                'serialize' => 'actor',
                'jsonOptions' => false,
            ]);

        $View = $controller->createView();
        $output = $View->render();

        $this->assertIsString($output);

        $object = json_decode($output);

        $this->assertIsObject($object);

        $this->assertEquals('/actors/1', $object->{'@id'});
        $this->assertIsArray($object->films);
    }

    private function getControllerForItem(): Controller
    {
        $request = new ServerRequest([
            'url' => 'actors/1',
            'params' => [
                'plugin' => null,
                'controller' => 'Actors',
                'action' => 'view',
                1
            ]
        ]);
        $request = $request->withEnv('HTTP_ACCEPT', 'application/hal+json, text/plain, */*');
        Router::setRequest($request);
        $response = (new ResponseModifier(self::EXT, self::MIME_TYPES, self::VIEW_CLASS))
            ->modify($request, new Response());

        $controller = new Controller($request, $response, 'Actors');
        $controller->modelClass = 'Actors';

        $actorTable = FactoryLocator::get('Table')->get('Actors');

        $actor = $actorTable->get(1, [
            'contain' => ['Films'],
        ]);

        $controller->set([
            'actor' => $actor,
        ]);

        return $controller;
    }
}
