{#
/**
 * Edit method
 */
#}
{% set belongsTo = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set belongsToMany = Bake.aliasExtractor(modelObj, 'belongsToMany') %}
{% set compact = ["'#{singularName}'"] %}
    /**
     * Edit method
     *
{% if "MixerApi/Crud" not in plugins %}
     * @param string|null $id {{ singularHumanName }} id.
{%  endif %}
     * @return \Cake\Http\Response|null|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException
     * @throws \Cake\Http\Exception\MethodNotAllowedException
{% if "MixerApi/ExceptionRender" in plugins and "SwaggerBake" in plugins %}
     * @throws \MixerApi\ExceptionRender\OpenApiExceptionSchema
{% elseif "MixerApi/ExceptionRender" in plugins %}
     * @throws \MixerApi\ExceptionRender\ValidationException
{% endif %}
     * @throws \Exception
     */
{% if "MixerApi/Crud" in plugins %}
    public function edit(UpdateInterface $update)
{% else %}
    public function edit($id = null)
{%  endif %}
    {
{% if "MixerApi/Crud" in plugins %}
        $this->set('data', $update->save($this));
{% else %}
        $this->request->allowMethod(['patch', 'post', 'put']);
        ${{ singularName }} = $this->{{ currentModelName }}->get($id, [
            'contain' => [{{ Bake.stringifyList(belongsToMany, {'indent': false})|raw }}],
        ]);
        ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $this->request->getData());
        if ($this->{{ currentModelName }}->save(${{ singularName }})) {
            $this->set('{{ singularName }}', ${{ singularName }});
            $this->viewBuilder()->setOption('serialize', {{ compact|join(', ')|raw }});

            return;
        }
        throw new \Exception("Record not saved");
{%  endif %}
    }
